package algorithm.programmers.level_one;

/**
 * 키패드 누르기
 * 
 * 스마트폰 전화 키패드의 각 칸에 다음과 같이 숫자들이 적혀 있습니다.
 * 
 * 이 전화 키패드에서 왼손과 오른손의 엄지손가락만을 이용해서 숫자만을 입력하려고 합니다.
 * 맨 처음 왼손 엄지손가락은 * 키패드에 오른손 엄지손가락은 # 키패드 위치에서 시작하며, 엄지손가락을 사용하는 규칙은 다음과 같습니다.
 * 
 * 엄지손가락은 상하좌우 4가지 방향으로만 이동할 수 있으며 키패드 이동 한 칸은 거리로 1에 해당합니다.
 * 왼쪽 열의 3개의 숫자 1, 4, 7을 입력할 때는 왼손 엄지손가락을 사용합니다.
 * 오른쪽 열의 3개의 숫자 3, 6, 9를 입력할 때는 오른손 엄지손가락을 사용합니다.
 * 가운데 열의 4개의 숫자 2, 5, 8, 0을 입력할 때는 두 엄지손가락의 현재 키패드의 위치에서 더 가까운 엄지손가락을 사용합니다.
 * 4-1. 만약 두 엄지손가락의 거리가 같다면, 오른손잡이는 오른손 엄지손가락, 왼손잡이는 왼손 엄지손가락을 사용합니다.
 * 순서대로 누를 번호가 담긴 배열 numbers, 왼손잡이인지 오른손잡이인 지를 나타내는 문자열 hand가 매개변수로 주어질 때,
 * 각 번호를 누른 엄지손가락이 왼손인 지 오른손인 지를 나타내는 연속된 문자열 형태로 return 하도록 solution 함수를 완성해주세요.
 * 
 * [제한사항]
 * numbers 배열의 크기는 1 이상 1,000 이하입니다.
 * numbers 배열 원소의 값은 0 이상 9 이하인 정수입니다.
 * hand는 "left" 또는 "right" 입니다.
 * "left"는 왼손잡이, "right"는 오른손잡이를 의미합니다.
 * 왼손 엄지손가락을 사용한 경우는 L, 오른손 엄지손가락을 사용한 경우는 R을 순서대로 이어붙여 문자열 형태로 return 해주세요.
 * @author keepConcentration
 */
public class PressKeypad {
	
	public static void main(String[] args) {
		System.out.println(new PressKeypad()
				//.solution(new int[] {1, 3, 4, 5, 8, 2, 1, 4, 5, 9, 5}, "right"));
				.solution(new int[] {7, 0, 8, 2, 8, 3, 1, 5, 7, 6, 2}, "left"));
				//.solution(new int[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 0}, "right"));
	}

	public String solution(int[] numbers, String hand) {
        String answer = "";
        int leftNum = 10;
        int rightNum = 12;
        for (int i = 0; i < numbers.length; ++i) {
        	if (numbers[i] % 3 == 1) {
        		answer += "L";
        		leftNum = numbers[i];
        		continue;
        	}
        	if (numbers[i] != 0 && numbers[i] % 3 == 0) {
        		answer += "R";
        		rightNum = numbers[i];
        		continue;
        	}
        	String thisAnswer = middleDigitHandCompute(numbers[i] == 0 ? 11 : numbers[i], leftNum, rightNum, hand);
        	answer += thisAnswer;
        	if (thisAnswer.equals("L")) {
        		leftNum = numbers[i] == 0 ? 11 : numbers[i];
        	} else {
        		rightNum = numbers[i] == 0 ? 11 : numbers[i];
        	}
        }
        return answer;
    }
	
	public String middleDigitHandCompute(int targetNum, int leftNum, int rightNum, String hand) {
		String answer = "";
		if (rightNum - leftNum == 2) {
			answer = hand.equals("left") ? "L" : "R";
		} else if (leftNum == targetNum) {
			answer = "L";
		} else if (rightNum == targetNum) {
			answer = "R";
		} else {
			int leftDistance = 0;
			int rightDistance = 0;
			
			int leftTargetMinus = (int)Math.abs(targetNum - leftNum);
			int rightTargetMinus = (int)Math.abs(targetNum - rightNum);
			switch (leftTargetMinus) {
				case 1 :
				case 3 : leftDistance = 1; break;
				case 2 :
				case 4 :
				case 6 : leftDistance = 2; break;
				case 5 :
				case 7 :
				case 9 : leftDistance = 3; break;
				case 8 :
				case 10 : leftDistance = 4; break;
			}
			
			switch (rightTargetMinus) {
				case 1 :
				case 3 : rightDistance = 1; break;
				case 2 :
				case 4 :
				case 6 : rightDistance = 2; break;
				case 5 :
				case 7 :
				case 9 : rightDistance = 3; break;
				case 8 :
				case 10 : rightDistance = 4; break;
			}
			if (leftDistance == rightDistance) {
				answer = hand.equals("left") ? "L" : "R";
			} else {
				answer = leftDistance < rightDistance ? "L" : "R";
			}
			
		}
		return answer;
	}
}
